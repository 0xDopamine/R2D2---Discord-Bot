import { validateOptions } from "../../Utils/UserValidation.js";
import DB from "../../schemas/LevelDB.js";
import { validateXP } from "../../Utils/XpValidation.js";
export class Level {
    #options;
    /**
     * Initialise a new level instance
     * @param {{ guildId: string, userId: string }} options
     */
    constructor(options) {
        this.#options = options;
        const validate = validateOptions(this.#options);
        if (validate.invalid)
            throw new TypeError(validate.error);
    }
    /**
     * Add a level to a users schema
     * @param {number} amount
     * @returns {Promise<object | null>}
     */
    add(amount = 1) {
        return new Promise(async (res, rej) => {
            const XPValidation = validateXP(amount);
            if (XPValidation.invalid)
                return rej(XPValidation.error);
            const data = await DB.findOne({ guildId: this.#options.guildId, userId: this.#options.userId });
            if (!data)
                return res(null);
            data.level += amount;
            await data.save();
            return res(data);
        });
    }
    /**
     * Subtract a level from a users schema
     * @param {number} amount
     * @returns {Promise<object | null>}
     */
    subtract(amount = 1) {
        return new Promise(async (res, rej) => {
            const XPValidation = validateXP(amount);
            if (XPValidation.invalid)
                return rej(XPValidation.error);
            const data = await DB.findOne({ guildId: this.#options.guildId, userId: this.#options.userId });
            if (!data)
                return res(null);
            data.level -= amount;
            await data.save();
            return res(data);
        });
    }
    /**
     * Set the level of a user
     * @param {number} amount
     * @returns {Promise<object | null>}
     */
    set(amount = 1) {
        return new Promise(async (res, rej) => {
            const XPValidation = validateXP(amount);
            if (XPValidation.invalid)
                return rej(XPValidation.error);
            const data = await DB.findOne({ guildId: this.#options.guildId, userId: this.#options.userId });
            if (!data)
                return res(null);
            data.level = amount;
            await data.save();
            return res(data);
        });
    }
}
