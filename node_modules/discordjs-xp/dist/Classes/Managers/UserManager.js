import DB from "../../schemas/LevelDB.js";
import { validateOptions, schemaExists } from "../../Utils/UserValidation.js";
import { User } from "../Structures/User.js";
export class UserManager {
    constructor() { }
    /**
     * Create a user and save it to the database
     * @param {{ guildId: string, userId: string }} options
     * @returns {Promise<User>}
     */
    create(options) {
        return new Promise(async (res, rej) => {
            const validate = validateOptions(options);
            if (validate.invalid)
                return rej(validate.error);
            if (await schemaExists(options))
                return res(await this.fetch(options));
            await DB.create({ guildId: options.guildId, userId: options.userId });
            return res(new User(options));
        });
    }
    /**
     * Delete a user from the database
     * @param {{ guildId: string, userId: string }} options
     * @returns {Promise<boolean | null>}
     */
    delete(options) {
        return new Promise(async (res, rej) => {
            const validate = validateOptions(options);
            if (validate.invalid)
                return rej(validate.error);
            if (!await schemaExists(options))
                return res(null);
            await DB.findOneAndDelete({ guildId: options.guildId, userId: options.userId });
            return res(true);
        });
    }
    /**
     * Fetch a user from the database
     * @param {{ guildId: string, userId: string }} options
     * @returns {Promise<User>}
     */
    fetch(options) {
        return new Promise(async (res, rej) => {
            const validate = validateOptions(options);
            if (validate.invalid)
                return rej(validate.error);
            if (!await schemaExists(options))
                return res(await this.create(options));
            return res(new User(options));
        });
    }
}
